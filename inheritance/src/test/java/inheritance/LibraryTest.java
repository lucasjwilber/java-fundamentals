/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package inheritance;

import org.junit.Before;
import org.junit.Test;

import java.util.Arrays;

import static org.junit.Assert.*;

public class LibraryTest {
    @Test public void testSomeLibraryMethod() {
        Library classUnderTest = new Library();
        assertTrue("someLibraryMethod should return 'true'", classUnderTest.someLibraryMethod());
    }

    @Test public void checkRestaurantConstructorFunctionality() {
        Restaurant restaurant = new Restaurant("Pizza Hut", 2);
        assertEquals(restaurant.name, "Pizza Hut");
        assertEquals(restaurant.price, 2);
    }

    @Test public void checkRestaurantToString() {
        Restaurant restaurant = new Restaurant("Pizza Hut", 2);
        String restaurantString = restaurant.toString();
        assertTrue(restaurantString.contains("Name: Pizza Hut"));
    }

    @Test public void checkReviewConstructorFunctionality() {
        Review review = new Review(0, "Gordon Ramsay", "Absolute garbage, ew");
        assertEquals(review.body, "Absolute garbage, ew");
        assertEquals(review.rating, 0);
    }

    @Test public void checkReviewToString() {
        Review review = new Review(0, "Gordon Ramsay", "Absolute garbage, ew");
        assertTrue(review.toString().contains("Author: Gordon Ramsay"));
        assertTrue(review.toString().contains("Rating: 0"));
    }

    @Test public void checkReviewsListInstantiation() {
        Restaurant restaurant = new Restaurant("Pizza Hut", 2);
        restaurant.reviews.add(new Review(0, "Gordon Ramsay", "Absolute garbage, ew"));
        assertTrue(restaurant.reviews.toString().contains("Rating: 0"));
    }

    @Test public void checkAddReviewMethod() {
        Restaurant restaurant = new Restaurant("Pizza Hut", 2);
        restaurant.addReview(0, "Gordon Ramsay", "Absolute garbage, ew");
        restaurant.addReview(3, "Papa John", "Bold, innovative and refreshing");
        assertTrue(restaurant.reviews.toString().contains("Absolute garbage"));
        assertTrue(restaurant.reviews.toString().contains("Rating: 3"));
    }

    @Test public void checkRatingIsAverageOfAllRatings() {
        Restaurant restaurant = new Restaurant("Pizza Hut", 2);
        restaurant.addReview(0, "Gordon Ramsay", "Absolute garbage, ew");
        restaurant.addReview(3, "Papa John", "Bold, innovative and refreshing");
        //IntelliJ suggests I use assertEquals but then tells me that test is deprecated when used to compare floats, and fails.
        assertTrue(restaurant.rating == 1.5);
        restaurant.addReview(3, "Gordon Ramsay", "Absolute garbage, ew");
        assertTrue(restaurant.rating == 2);
    }

    @Test public void checkThatRatingsMustBe0to5() {
        Restaurant restaurant = new Restaurant("Pizza Hut", 2);
        restaurant.addReview(-1, "Gordon Ramsay", "Absolute garbage, ew");
        assertTrue(restaurant.rating == 0);
        restaurant.addReview(6, "Papa John", "Bold, innovative and refreshing");
        assertTrue(restaurant.rating == 0);
        restaurant.addReview(2, "Papa John", "Bold, innovative and refreshing");
        assertTrue(restaurant.rating == 2);
        restaurant.addReview(4, "Papa John", "Bold, innovative and refreshing");
        assertTrue(restaurant.rating == 3);
    }

    @Before public void shopSetUp() {
        Shop shop = new Shop("Safeway", 2);
    }


    @Test public void canInstantiateAShop() {
        Shop shop = new Shop("Safeway", 2);
        assertEquals(2, shop.price);
    }
    @Test public void shopToString() {
        Shop shop = new Shop("Safeway", 2);
        assertTrue(shop.toString().contains("Safeway"));
    }
    @Test public void shopCanGetReviews() {
        Shop shop = new Shop("Safeway", 2);
        shop.addReview(3, "Sam", "Decent place to shop.");
        assertTrue(shop.reviews.toString().contains("Author: Sam"));
    }

    @Test public void canInstantiateATheater() {
        Theater theater = new Theater("Cool Theater", 3);
        assertEquals(3, theater.price);
    }
    @Test public void theaterToString() {
        Theater theater = new Theater("Cool Theater", 3);
        assertTrue(theater.toString().contains("Cool Theater"));
    }
    @Test public void theaterCanGetReviewsWithoutMovieName() {
        Theater theater = new Theater("Regal", 2);
        theater.addReview(5, "Tom", "wow it's so nice");
        assertTrue(theater.reviews.toString().contains("wow it's so nice"));
    }
    @Test public void theaterReviewsCanHaveMovieName() {
        Theater theater = new Theater("Regal", 2);
        theater.addReview(5, "Tom", "wow it's so nice", "Star Wars 99");
        assertTrue(theater.reviews.toString().contains("Movie: Star Wars"));
    }
    @Test public void theaterHasListOfMovies() {
        Theater theater = new Theater("Regal", 2);
        theater.addMovie("Bambi");
        assertTrue(theater.movies.contains("Bambi"));
    }
    @Test public void canRemoveMoviesFromTheaterMoviesList() {
        Theater theater = new Theater("Regal", 2);
        theater.addMovie("Bambi");
        theater.removeMovie("Bambi");
        assertFalse(theater.movies.contains("Bambi"));
    }
    @Test public void ratingsUpdateOnTheaters() {
        Theater theater = new Theater("Regal", 2);
        theater.addReview(2, "Someone", "meh");
        theater.addReview(5, "Someone else", "wOaH");
        assertTrue(3.5f == theater.rating);
    }
}
