/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;
import java.io.FileNotFoundException;
import java.util.Scanner;



public class Library {

    public static int[] roll(int rolls) {
        if (rolls < 1) {
            System.out.println("Enter a positive integer");
            //implement try/catch or manually throw an exception here:
            return null;
        }
        int[] rollsArr = new int[rolls];
        for (int i = 0; i < rollsArr.length; i++) {
            rollsArr[i] = (int) Math.ceil(Math.random() * 6);
        }
        return rollsArr;
    }

    public static boolean containsDuplicates (int[] arr) {
        boolean result = false;
        checkLoop:
            for (int i = 0; i < arr.length; i++) {
                //loop through and compare each index to the whole array
                for (int j = 0; j < arr.length; j++) {
                    if (arr[i] == arr[j] && j != i) {
                        //if a match is found that ISN'T the original...
                        result = true;
                        break checkLoop;
                    }
                }
            }
        return result;
    }

    public static float calculatesAverages(int[] arr) {
        float average = 0;
        float arrLength = arr.length;
        for (float num : arr) {
            average += num / arrLength;
        }
        return average;
    }

    public static int[] arrayWithLowestAvg(int[][] matrix) {
        int[] lowestAvg = matrix[0];

        if (matrix.length > 1) {
            for (int i = 1; i < matrix.length; i++) {
                if (calculatesAverages(matrix[i]) < calculatesAverages(lowestAvg)) {
                    lowestAvg = matrix[i];
                }
            }
        }
        return lowestAvg;
    }

    public static String mapTemperatures(int[][] weatherData) {
        Set<Integer> weatherSet = new HashSet<>();
        for (int[] week : weatherData) {
            for (int day : week) {
                weatherSet.add(day);
            }
        }
        //convert hashset to arraylist so we can sort it
        List<Integer> sortedWeather = new ArrayList<>();
        sortedWeather.addAll(weatherSet);
        Collections.sort(sortedWeather);

        int lowestTemp = sortedWeather.get(0);
        int highestTemp = sortedWeather.get(sortedWeather.size() - 1);

        StringBuilder result = new StringBuilder();
        result.append(String.format("High: %d\nLow: %d", highestTemp, lowestTemp));
        for (int i = lowestTemp; i < highestTemp; i++) {
            if (!sortedWeather.contains(i)) {
                result.append(String.format("\nNever saw temperature %d.", i));
            }
        }
        return result.toString();
    }

    public static String tally(List<String> votesList) {
        HashMap<String, Integer> voteMap = new HashMap<>();

        int mostVotes = 0;
        String voteLeader = null;

        for (String name : votesList) {
            voteMap.putIfAbsent(name, 0);
            voteMap.put(name, voteMap.get(name) + 1);
            if (voteMap.get(name) > mostVotes) {
                mostVotes = voteMap.get(name);
                voteLeader = name;
            }
        }
        return voteLeader + " is the winner, with " + mostVotes + " votes.";
    }


    public static void main (String[] args) {
        System.out.println("hi");
    }
}
